# There are two profiles

# * The "all" profile brings up opensearch, localstack and all
#   velociraptor components.

# * The "base" profile brings up only opensearch and localstack so you
#   can start various Velociraptor services manually (See Makefile in
#   top level).

version: '3.9'
services:
  opensearch:
    profiles:
      - base
      - all
    image: opensearchproject/opensearch:2
    container_name: opensearch
    hostname: opensearch
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - ./opensearch-config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - opensearch-data:/usr/share/opensearch/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_index_template" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 60s
    ports:
      - 9200:9200
      - 9300:9300
      - 9600:9600 # required for Performance Analyzer
    networks:
      - velociraptor-network

  localstack:
    profiles:
      - all

    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - 4566:4566
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - KINESIS_PROVIDER=kinesalite
      # These have to match up with the config in server.config.yaml
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - "./.localstack:/tmp/localstack"
    networks:
      - velociraptor-network

  # The frontend is the node that receives connections from clients.
  velociraptor-frontend:
    profiles:
      - all

    restart: on-failure
    container_name: velociraptor-frontend
    image: cvelociraptor
    depends_on:
      opensearch:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - '8000:8000'
    volumes:
      - ./config:/config/:ro
    entrypoint: /cvelociraptor --config /config/server.config.yaml frontend -v
    networks:
      - velociraptor-network

  velociraptor-foreman:
    profiles:
      - all

    restart: on-failure
    container_name: velociraptor-foreman
    image: cvelociraptor
    depends_on:
      opensearch:
        condition: service_healthy
    volumes:
      - ./config:/config/:ro
#    entrypoint: /cvelociraptor --config /config/server.config.yaml foreman -v --debug
    entrypoint: /cvelociraptor --config /config/server.config.yaml foreman -v
    networks:
      - velociraptor-network

  # The frontend is the node that receives connections from clients.
  velociraptor-gui:
    profiles:
      - all

    restart: on-failure
    container_name: velociraptor-gui
    image: cvelociraptor
    depends_on:
      opensearch:
        condition: service_healthy
    ports:
      - target: 8889
        published: 8889
        protocol: tcp
        mode: host

    volumes:
      - ./config:/config/:ro
    entrypoint: /cvelociraptor --config /config/server.config.yaml gui -v
    networks:
      - velociraptor-network

  # The client connects to the
  velociraptor-client:
    profiles:
      - all

    restart: on-failure
    container_name: velociraptor-client
    image: cvelociraptor
    depends_on:
      opensearch:
        condition: service_healthy
    entrypoint: /cvelociraptor --config /config/client.config.yaml client -v
    volumes:
      - ./config:/config/:ro
    networks:
      - velociraptor-network

volumes:
  # Volume to store opensearch databases - clear with
  # docker volume rm docker_opensearch-data
  opensearch-data:


networks:
  velociraptor-network:
